/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

__wso2() {


  // Script below configures OSGi container to make agent classes visible system wide.
  // This is important when using Spy as instrumented code has to see agent classes.

  __carbonOSGiConfigurer() {

    process(record) {
      zorka.logInfo("Initial properties map: " + record.get("PARAM"));
      zorka.logInfo("(Re)Configuring OSGi parameters for Zorka Spy ...");

      p = record.get("PARAM");
      s = p.get("org.osgi.framework.system.packages");
      s = s + ",com.jitlogic.zorka.core.spy";

      p.put("org.osgi.framework.system.packages", s);
      zorka.logInfo("Set org.osgi.framework.system.packages to: '" + s + "'");

      s2 = p.get("org.osgi.framework.bootdelegation");
      if (s2 != null && s2.length() > 0) {
        s2 = s2 + ",com.jitlogic.zorka.core.*";
      } else {
        s2 = "com.jitlogic.zorka.core.*";
      }

      p.put("org.osgi.framework.bootdelegation", s2);
      zorka.logInfo("Set org.osgi.framework.bootdelegation to: '" + s2 + "'");
    }

    return this;
  }

  spy.add(spy.instance()
    .onReturn(spy.fetchRetVal("PARAM"),
              (com.jitlogic.zorka.core.spy.SpyProcessor)__carbonOSGiConfigurer())
    .include(spy.byMethod(spy.AC_PRIVATE, "org.wso2.carbon.server.CarbonLauncher",
                          "buildInitialPropertyMap", "java.util.Map")));


  if (zorka.boolCfg("tracer", false)) {

    __osgiBaseAdaptorConfigurer() {
      process(record) {
        zorka.logInfo("Swapping BaseAdaptor classloader with overlay ...");

        try {
          clazz = record.get("THIS").getClass();
          oldCL = zorka.getField(clazz, "bundleClassLoaderParent");
          newCL = zorka.overlayClassLoader(oldCL, "com.jitlogic.zorka.**", ClassLoader.getSystemClassLoader());
          zorka.setField(clazz, "bundleClassLoaderParent", newCL);
        } catch (Exception e) {
          zorka.logError("Error swapping class loader" + e);
        }

        return record;
      }

      return this;
    }

    spy.add(spy.instance()
      .onReturn(spy.fetchArg("THIS", 0), (com.jitlogic.zorka.core.spy.SpyProcessor)__osgiBaseAdaptorConfigurer())
      .include(spy.byMethod("org.eclipse.osgi.baseadaptor.BaseAdaptor", "<init>")));


    if (zorka.boolCfg("tracer.hires", false)) {
      tracer.setTracerMinMethodTime(1000000);
      tracer.setTracerMinTraceTime(0);
      tracer.setTracerMaxTraceRecords(4096);
    }

    tracer.exclude(
      spy.byClass("sun.**"),
      spy.byClass("java.**"),
      spy.byClass("javax.**"),
      spy.byClass("com.sun.**"),
      spy.byClass("com.jitlogic.zorka.**"),
      spy.byClass("org.xml.sax.**"),
      spy.byClass("org.jcp.**"),
      spy.byClass("~^\\$Proxy.*$"),
      spy.byClass("org.apache.xerces.**"),
      spy.byClass("org.apache.xalan.**"),
      spy.byClass("org.apache.xml.**"),
      spy.byClass("org.apache.xpath.**"),
      spy.byClass("org.w3c.**"),
      spy.byClass("net.sf.saxon.**"),
      spy.byClass("org.wso2.carbon.ndatasource.**"),
      spy.byClass("org.omg.**")
    );


    tracer.include(spy.byClass("**").forTrace());


    spy.add(spy.instance()
      .onEnter(spy.fetchArg("CTX", 1), tracer.begin("AXIS_REQ"))
      .include(spy.byMethod("org.apache.axis2.transport.http.HTTPTransportUtils", "processHTTPPostRequest")));

          //spy.format("ACTION", "${CTX.soapAction}"),
          //tracer.attr("ACTION", "ACTION"))

    // Set tracer output 
    tracer.output(tracer.toFile(
      zorka.stringCfg("tracer.file", "${zorka.log.dir}/trace.trc"), 16, 128*1024*1024));

  }


  return this;
}

wso2 = __wso2();
