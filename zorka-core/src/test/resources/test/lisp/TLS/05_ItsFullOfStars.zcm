; /**
;  * From book: The Little Schemer, by Daniel P. Friedman and Matthias Felleisen.
;  *
;  * Chapter 5: Oh My Gawd*: It's Full Of Stars
;  */


(defn add1 (n)
  (+ n 1))


(defn sub1 (n)
  (- n 1))

(defn rember* (a l)
  (cond
    ((null? l) nil)
    ((atom? (car l))
      (cond
        ((eq? (car l) a) (rember* a (cdr l)))
        (else (cons (car l) (rember* a (cdr l))))))
    (else (cons (rember* a (car l)) (rember* a (cdr l))))))

(deftest test-rember*
  (is=
    '((cofee) ((tea)) (and (hick)))
    (rember* 'cup '((cofee) cup ((tea) cup) (and (hick)) cup)))
  (is=
    '(((tomato)) ((bean)) (and ((flying))))
    (rember* 'sauce '(((tomato sauce))((bean) sauce)(and ((flying)) sauce)))))


; /**
;  * The First Commandment: (final version)
;  *
;  * When recurring on a list of atoms, 'lat', ask two questions about it:
;  * (null? lat) and else.
;  *
;  * When recurring on a number, n, ask two questions about it:
;  * (zero? n) and else.
;  *
;  * When recurring on a list of S-expressions, l, ask three questions about it:
;  * (null? l), (atom? (car l)), and else.
;  */

(defn insertR* (new old l)
  (cond
    ((null? l) nil)
    ((atom? (car l))
      (cond
        ((eq? (car l) old) (cons old (cons new (insertR* new old (cdr l)))))
        (else (cons (car l) (insertR* new old (cdr l))))))
    (else (cons (insertR* new old (car l)) (insertR* new old (cdr l))))))

(deftest test-insertR*
  (is=
    '((how much (wood)) could ((a (wood) chuck roast)) (((chuck roast)))
     (if (a) ((wood chuck roast))) could chuck roast wood)
    (insertR* 'roast 'chuck '((how much (wood)) could ((a (wood) chuck)) (((chuck)))
                              (if (a) ((wood chuck))) could chuck wood))))


(defn occur* (a l)
  (cond
    ((null? l) 0)
    ((atom? (car l))
      (cond
        ((eq? a (car l)) (add1 (occur* a (cdr l))))
        (else (occur* a (cdr l)))))
    (else
      (+
        (occur* a (car l))
        (occur* a (cdr l))))))

(deftest test-occur*
  (is= 5
    (occur*
      'banana
      '((banana) (split ((((banana ice))) (cream (banana)) sherbet)) (banana) (bread) (banana brandy)))))


; Custom version with (if), a bit simplified.
(defn occur-x* (a l)
  (cond
    ((null? l) 0)
    ((atom? (car l))
      (+
        (if (eq? (car l) a) 1 0)
        (occur* a (cdr l))))
    (else
      (+
        (occur* a (car l))
        (occur* a (cdr l))))))


(defn subst* (new old l)
  (cond
    ((null? l) nil)
    ((atom? (car l))
      (cond
        ((eq? old (car l)) (cons new (subst* new old (cdr l))))
        (else (cons (car l) (subst* new old (cdr l))))))
     (else (cons
             (subst* new old (car l))
             (subst* new old (cdr l))))))

(deftest test-subst*
  (is=
    '((orange) (split ((((orange ice))) (cream (orange)) sherbet)) (orange) (bread) (orange brandy))
    (subst* 'orange 'banana
      '((banana) (split ((((banana ice))) (cream (banana)) sherbet)) (banana) (bread) (banana brandy)))))


(defn insertL* (new old l)
  (cond
    ((null? l) nil)
    ((atom? (car l))
      (cond
        ((eq? old (car l)) (cons new (cons old (insertL* new old (cdr l)))))
        (else (cons (car l) (insertL* new old (cdr l))))))
    (else
      (cons
        (insertL* new old (car l))
        (insertL* new old (cdr l))))))

(deftest test-insertL*
  (is=
    '((how much (wood)) could ((a (wood) pecker chuck)) (((pecker chuck)))
     (if (a) ((wood pecker chuck))) could pecker chuck wood)
    (insertL* 'pecker 'chuck
      '((how much (wood)) could ((a (wood) chuck)) (((chuck)))
        (if (a) ((wood chuck))) could chuck wood))))


(defn member* (a l)
  (cond
    ((null? l) #f)
    ((atom? (car l)) (or (eq? (car l) a) (member* a (cdr l))))
    (else (or (member* a (car l)) (member* a (cdr l))))))

(deftest test-member*
  (is (member* 'chips '((potato)(chips ((with) finsh) (chips))))))


(defn leftmost (l)
  (cond
    ((null? l) nil)
    ((atom? (car l)) (car l))
    (else (leftmost (car l)))))

(deftest test-leftmost
  (is= 'potato (leftmost '((potato) (chips ((with) fish)(chips)))))
  (is= 'hot (leftmost '(((hot) (tuna (and))) cheese)))
  (is= nil (leftmost '(((() four)) 17 (seventeen))))
  (is= nil (leftmost '())))


(defn eqlist? (l1 l2)
  (cond
    ((and (null? l1) (null? l2)) #t)
    ((or (null? l1) (null? l2)) #f)
    ((and (atom? (car l1)) (atom? (car l2)))
      (and
        (eq? (car l1) (car l2))
        (eqlist? (cdr l1) (cdr l2)) ))
    ((or (atom? (car l1) (car l2))) #f)
    (else
      (and
        (eqlist? (car l1) (car l2))
        (eqlist? (cdr l1) (cdr l2))))))

(deftest test-eqlist
  (is (eqlist? '(strawberry ice cream) '(strawberry ice cream)))
  (isnt (eqlist? '(strawberry cream ice) '(strawberry ice cream)))
  (isnt (eqlist? '(banana ((split))) '((banana)(split))))
  (isnt (eqlist? '(beef ((sausage)) (and (soda))) '(beef ((salami)) (and (soda)))))
  (is (eqlist? '(beef ((sausage)) and (soda)) '(beef ((sausage)) and (soda)))))


; /**
;  * The Sixth Commandment:
;  *
;  * Simplify only after the function is correct.
;  */

(defn equals? (s1 s2)
  (cond
    ((and (atom? s1) (atom? s2)) (eq? s1 s2))
    ((or (atom? s1) (atom? s2)) #f)
    (else (eqlist? s1 s2))))

(deftest test-equals?
  (is (equals? nil nil))
  (is (equals? 'br0mba 'br0mba))
  (isnt (equals? 'br0mba 'bromba))
  (is (equals? '(strawberry ice cream) '(strawberry ice cream)))
  (isnt (equals? '(strawberry cream ice) '(strawberry ice cream)))
  (isnt (equals? '(banana ((split))) '((banana)(split))))
  (isnt (equals? '(beef ((sausage)) (and (soda))) '(beef ((salami)) (and (soda)))))
  (is (equals? '(beef ((sausage)) and (soda)) '(beef ((sausage)) and (soda)))))


(defn eqlist? (l1 l2)
  (cond
    ((and (null? l1) (null? l2)) #t)
    ((or (null? l1) (null? l2)) #f)
    (else
      (and (equals? (car l1) (car l2))
           (eqlist? (cdr l1) (cdr l2))))))


(defn rember (s l)
  (cond
    ((null? l) '())
    ((equal? (car l) s) (cdr l))
    (else (cons (car l)
                (rember s (cdr l))))))

(deftest test-rember-again
  (is=
    '(lamb chopz and jelly)
    (rember 'mint '(lamb chopz and mint jelly)))
  (is=
    '(lamb chops and flavored mint jelly)
    (rember 'mint '(lamb chops and mint flavored mint jelly)))
  (is=
    '(coffe tea cup and hick cup)
    (rember 'cup '(coffe cup tea cup and hick cup)))
  (is=
    '(bacon lettuce and tomato)
    (rember 'toast '(bacon lettuce and tomato)))
  (is=
    '(lettuce and tomato)
    (rember 'bacon '(bacon lettuce and tomato)))
  (is=
    '(bacon lettuce tomato)
    (rember 'and '(bacon lettuce and tomato)))
  (is=
    '(soy and tomato sauce)
    (rember 'sauce '(soy sauce and tomato sauce))))

