/**
 * Copyright 2012 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

__jvm() {

  autoregister() {
      if (!zorka.isMbsRegistered("java")) {
          mbs = java.lang.management.ManagementFactory.getPlatformMBeanServer();
          zorka.registerMbs("java", mbs);
          zorka.logInfo("Registered platform mbean server as 'java'");
      } else {
          zorka.logInfo("Platform mbean server already registered. Skipping.");
      }
  }


  autoregister_plugin() {
      process(rec) {
          autoregister();
          return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  memutil(name) {
    mem_used = zorka.jmx("java", "java.lang:name="+name+",type=MemoryPool", "Usage", "used");
    mem_max = zorka.jmx("java", "java.lang:name="+name+",type=MemoryPool", "PeakUsage", "max");
    if (mem_used == null || mem_max == null) return null;
    if (mem_used.equals(0L) || mem_max.equals(0L)) return 0.0;
    return 100.0 * mem_used.longValue() / mem_max.longValue();
  }

  heaputil(name) {
    mem_used = zorka.jmx("java", "java.lang:type=Memory",name, "used");
    mem_max = zorka.jmx("java", "java.lang:type=Memory",name, "max");
    if (mem_used == null || mem_max == null) return null;
    if (mem_used.equals(0L) || mem_max.equals(0L)) return 0.0;
    return 100.0 * mem_used.longValue() / mem_max.longValue();
  }

  fdutil() {
    fd_used = zorka.jmx("java", "java.lang:type=OperatingSystem", "OpenFileDescriptorCount");
    fd_max = zorka.jmx("java", "java.lang:type=OperatingSystem", "MaxFileDescriptorCount");
    if (fd_used == null || fd_max == null) return null;
    if (fd_used.equals(0L) || fd_max.equals(0L)) return 0.0;
    return 100.0 * fd_used.longValue() / fd_max.longValue();
  }

  if (zorka.boolCfg("jvm.hiccup", true)) {
    mbean = zorka.stringCfg("jvm.hiccup.mbean", "zorka:type=ZorkaStats,name=Hiccup");
    perfmon.cpuHiccup("java", mbean, "CPU", 10, 30000).start();
  } // hiccup = yes

  if (zorka.boolCfg("tracer")) {
      tracer.exclude(
          "com.sun.java_cup.**",
          "com.sun.jndi.ldap.Ber*",
          "com.sun.jmx.**",
          "com.sun.org.apache.**",
          "com.sun.proxy.**",
          "com.sun.tools.javac.**",
          "com.sun.xml.**",
          "javax.management.**",
          "sun.dc.pr.**",
          "sun.font.**",
          "sun.java2d.**",
          "com.sun.media.imageioimpl.**",
          "sun.misc.CharacterDecoder",
          "sun.misc.FpUtils",
          "sun.misc.IOUtils",
          "sun.misc.URLClassPat*",
          "sun.net.www.http.ChunkedInputStream",
          "sun.net.www.protocol.http.HttpURLConnection$HttpInputStream",
          "sun.nio.cs.**",
          "sun.security.provider.**",
          "sun.util.ResourceBundleEnumeration",
          "sun.security.**",
          "sun.text.**"
      );
  }

  if (zorka.boolCfg("nagios", false)) {
    nagios.defcmd("MEM_POOLS", nagios.jmxcmd(
      zorka.query("java", "java.lang:type=MemoryPool,*", "type", "name").get("Usage"), "MEM_POOLS", "memory pools")
      .withAttrs("name", "used", "max").withRcMax(95, 99).withScale(1048576,"MB"));
    nagios.defcmd("MEMORY", nagios.jmxcmd(
      zorka.query("java", "java.lang:type=Memory", "type").get("HeapMemoryUsage"), "MEMORY", "memory")
      .withAttrs("type", "used", "max").withRcMax(95, 99).withSelFirst().withScale(1048576,"MB"));
    nagios.defcmd("GC_COUNT", nagios.jmxcmd(
      zorka.query("java", "java.lang:type=GarbageCollector,*", "type", "name"), "GC_COUNT", "Collection Counter")
      .withAttrs("name", "CollectionCount", null).withSelFirst().withScale(1, "Cycles"));
    nagios.defcmd("GC_TIME", nagios.jmxcmd(
      zorka.query("java", "java.lang:type=GarbageCollector,*", "type", "name"), "GC_TIME", "Collection Time")
      .withAttrs("name", "CollectionTime", null).withSelFirst().withScale(1, "ms"));
  }

  if (zorka.boolCfg("zorka.mbs.autoregister", false)) {
    autoregister();
  }

  return this;
}


jvm = __jvm();
