

(defn spy/on (sdef . includes)
   (.include sdef (to-array includes)))


(defmacro spy/on-enter (sdef args . body)
  `(.with ~sdef 0 (spy/lisp-fn (fn ~args ~@body))))


(defmacro spy/on-return (sdef args . body)
  `(.with ~sdef 1 (spy/lisp-fn (fn ~args ~@body))))


(defmacro spy/on-error (sdef args . body)
  `(.with ~sdef 2 (spy/lisp-fn (fn ~args ~@body))))


(defmacro spy/on-submit (sdef args . body)
  `(.with ~sdef 3 (spy/lisp-fn (fn ~args ~@body))))


(defn spy/fetch-arg (sdef name idx)
  (.with sdef 0 (spy/arg-probe name idx)))


(defn spy/fetch-ret (sdef name)
  (.with sdef 1 (spy/ret-probe name)))


(defn spy/fetch-err (sdef name)
  (.with sdef 2 (spy/ret-probe name)))


(defmacro spy/defi (sym . clauses)
  `(def ~sym
    (spy/add!
      (->
        (spy/sdef ~(.getName sym))
        ~@clauses
        ))))


