
(defn spy/-process-instrument-on-clauses (clauses)
  (cond
    ((nil? clauses) nil)
    ((equal? 'on (caar clauses)) (cons `(.include ,(to-array (cdar clauses)))
                                   (spy/-process-instrument-on-clauses (cdr clauses))))
    (else (spy/-process-instrument-on-clauses (cdr clauses)))))


(defn spy/-process-instrument-on-enter (clauses)
  (cond
    ((nil? clauses) nil)
    ((equal? 'on-enter (caar clauses)) (cons `(.with1 0 (spy/lisp-fn (lambda ,@(cdar clauses))))
                                         (spy/-process-instrument-on-enter (cdr clauses))))
    (else (spy/-process-instrument-on-enter (cdr clauses)))))


(defmacro spy/defi (sym . clauses)
  (let ((sname (.getName sym))
        (includes (spy/-process-instrument-on-clauses clauses))
        (on-enter (spy/-process-instrument-on-enter clauses))  )
    `(define ,sym
      (spy/add!
        (->
          (spy/sdef ,sname)
          ,@includes
          ,@on-enter
          )))))


