/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require("jvm.bsh");
zorka.require("http.bsh");

__jetty() {

  spy.add(spy.instrument("JETTY_HTTP")
    .onEnter(spy.fetchArg("REQ", 2), spy.fetchArg("RESP", 4),
      spy.format("URI", "${REQ.requestURI}"),
      http._trace ? spy.subchain(
        http._uriQualifier,
        tracer.begin("HTTP", zorka.longCfg("http.trace.time")),
        tracer.attr("URI", "URI")
      ) : null,
      http._congestion ? spy.zorkaStats("java", http._mbean, "stats", "ALL", "T", null, spy.ACTION_ENTER) : null)
    .onError(spy.fetchError("EX"), spy.format("ERR", "${EX}"),
      http._trace ? spy.subchain(
        http._uriQualifier,
        tracer.flags(tracer.SUBMIT_TRACE),
        tracer.attr("ERR", "ERR")
      ) : null)
    .onSubmit(
      spy.strTime("TIME"),
      spy.format("STATUS", "${RESP.status}"),
      spy.get("USER", "REQ", "remoteUser"),
      http._trace ? spy.subchain(
        http._uriQualifier,
        tracer.attr("STATUS", "STATUS"),
        tracer.filterBy("STATUS", null, http._errors, null, null),
        tracer.attr("USER", "USER"),
        http._params ? http.param_processor() : null,
        http._cookies ? http.cookies_processor(true, false) : null,
        http._headers ? http.headers_processor(true, true) : null
      ) : null,
      http._slow ? spy.subchain(
        spy.longerThan(zorka.longCfg("http.slow.time")),
        spy.strTime("TIME"),
        spy.trapperCollector(http.slow_ft, zorka.INFO, "HTTP", zorka.stringCfg("http.slow.format"))) : null,
      http._error ? spy.subchain(
        spy.valSetFilter("STATUS", http._errors),
        http.error_marker(),
        http._trace ? tracer.flags(tracer.ERROR_MARK|tracer.SUBMIT_TRACE) : null,
        spy.trapperCollector(http.error_ft, zorka.ERROR, "HTTP", zorka.stringCfg("http.error.format"))) : null,
      http._stats ? spy.zorkaStats("java", http._mbean, "stats", "ALL", "T", null, http._action) : null)
    .include(
      spy.byMethod("org.mortbay.jetty.servlet.ServletHandler", "doHandle"),
      spy.byMethod("org.eclipse.jetty.servlet.ServletHandler", "doHandle")));

  if (http._trace) {
    tracer.exclude(
      "org.eclipse.jetty.util.**",
      "org.eclipse.jetty.http.Http*",
      "org.eclipse.jetty.server.Response",
      "org.eclipse.jetty.server.HttpOutput"
    );
  }

  jvm.autoregister();

  return this;
}

jetty = __jetty();

