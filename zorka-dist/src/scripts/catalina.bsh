/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require("http.bsh");

__catalina() {

    headers_processor() {

        _iprefix = zorka.stringCfg("http.headers.iprefix");
        _oprefix = zorka.stringCfg("http.headers.oprefix");
        _matcher = util.stringMatcher(zorka.listCfg("http.headers.include"), zorka.listCfg("http.headers.exclude"));
        _maxlen = zorka.intCfg("http.headers.maxlen");

        process(rec) {

            req = rec.get("REQ");
            if (http._trace && req != null && req.getHeaderNames() != null) {
                for (name : req.getHeaderNames()) {
                    hdrs = req.getHeaders(name);
                    if (hdrs != null) {
                        i = 0;
                        for (hdr : hdrs) {
                            if (hdr.length() > _maxlen) {
                                hdr = hdr.substring(0, _maxlen) + "...";
                            }
                            if (i == 0) {
                                tracer.newAttr(_iprefix + name, hdr);
                            } else {
                                tracer.newAttr(_iprefix + i + "_" + name, hdr);
                            }
                            i++;
                        }
                    }
                }
            }

            resp = rec.get("RESP");
            if (resp != null) {
                headers = resp.getCoyoteResponse().getMimeHeaders();
                for (name : headers.names()) {
                    i = 0;
                    for (hdr : headers.values(name)) {
                        if (hdr.length() > _maxlen) {
                            hdr = hdr.substring(0, _maxlen) + "...";
                        }
                        if (i == 0) {
                            tracer.newAttr(_oprefix + name, hdr);
                        } else {
                            tracer.newAttr(_oprefix + i + "_" + name, hdr);
                        }
                    }
                }
                location = headers.getHeader("Location");
                if (http._trace && location != null) {
                    tracer.newAttr("REDIRECT", location);
                }
            }

          return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }


  spy.add(spy.instrument("CATALINA_HTTP")
    .onEnter(spy.fetchArg("REQ", 1), spy.fetchArg("RESP", 2),
      spy.format("URI", "${REQ.request.requestURI}"),
      http._trace ? spy.subchain(
        http._uriQualifier,
        tracer.begin("HTTP", zorka.longCfg("http.trace.time")),
        tracer.attr("URI", "URI")
      ) : null,
      http._congestion ? spy.zorkaStats("java", http._mbean, "stats", "ALL", "T", null, spy.ACTION_ENTER) : null)
    .onReturn(spy.put("ERR", ""))
    .onError(spy.fetchError("EX"), spy.format("ERR", "${EX}"),
      http._trace ? spy.subchain(
        http._uriQualifier,
        tracer.flags(tracer.SUBMIT_TRACE),
        tracer.attr("ERR", "ERR")
        ) : null)
    .onSubmit(
      spy.strTime("TIME"),
      spy.format("STATUS", "${RESP.status}"),
      spy.get("USER", "REQ", "remoteUser"),
      http._trace ? spy.subchain(
        http._uriQualifier,
        tracer.attr("STATUS", "STATUS"),
        tracer.filterBy("STATUS", null, http._errors, null, null),
        tracer.attr("USER", "USER"),
        http._cookies ? http.cookies_processor(true, true) : spy.put("COOKIES", ""),
        http._headers ? headers_processor() : null,
        http._params ? http.param_processor() : spy.put("PARAMS", "")
      ) : null,
      http._slow ? spy.subchain(
        spy.longerThan(zorka.longCfg("http.slow.time")),
        spy.trapperCollector(http.slow_ft, zorka.INFO, "HTTP", zorka.stringCfg("http.slow.format"))) : null,
      spy.subchain(
        spy.valSetFilter("STATUS", http._errors),
        http.error_marker(),
        http._trace ? tracer.flags(tracer.ERROR_MARK|tracer.SUBMIT_TRACE) : null,
        http._error ? spy.trapperCollector(http.error_ft, zorka.ERROR, "HTTP", zorka.stringCfg("http.error.format")) : null),
      http._stats ? spy.zorkaStats("java", http._mbean, "stats", "ALL", "T", null, http._action) : null)
    .include(spy.byMethod("org.apache.catalina.core.StandardEngineValve", "invoke")));


  if (zorka.boolCfg("tracer")) {
    tracer.exclude(
        "org.apache.tomcat.util.**",
        "org.apache.naming.resources.**",
        "org.apache.catalina.security.**",
        "org.apache.catalina.core.ApplicationCont**",
        "org.apache.catalina.core.ContainerBase/fireContainerEvent",
        "org.apache.catalina.core.StandardWrap**",
        "org.apache.catalina.core.StandardContext",
        "org.apache.catalina.connector.**", // TODO but this is sometimes useful for resolving connectivity problems
        "org.apache.catalina.session.StandardSession",
        "org.apache.catalina.session.StandardSessionFacade",
        "org.apache.catalina.util.**",
        "org.apache.coyote.Request",
        "org.apache.coyote.Response",
        "org.apache.catalina.core.ApplicationHttpRequest"
    );
  }

  return this;
}


catalina = __catalina();
