/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * CAS server monitoring, tracing and auditing.
 *
 * The following settings (and default values) can be set in zorka.properties:
 *
 * - cas.audit = yes            enables while CAS auditing fuctionality;
 * - cas.audit.file = yes       enables logging audit information to local file;
 * - cas.audit.syslog = no      enables sending audit information to syslog server;
 * - cas.audit.zabbix = no      enables sending audit information to zabbix server;
 * - cas.audit.tag = cas.audit  zabbix item or syslog tag audit records will be marked with;
 * - cas.audit.syslog.addr      syslog server address (127.0.0.1);
 * - cas.audit.file.path        path to log file (defaults to ${zorka.log.dir}/cas_audit.log);
 * - cas.audit.zabbix.addr      zabbix host (defaults to ${zabbix.host.addr});
 * - cas.stats = yes            enables maintaining of CAS-specific statistics;
 * - cas.stats.mbean =          mbean name that will maintain statistics for CAS;
 * - cas.trace = ${tracer}
 * - cas.trace.time = ${tracer.min.trace.time}
 */

zorka.require(
  "javax.bsh",
  "ldap.bsh",
  "tracer.bsh",
  "jboss/hibernate.bsh",
  "spring/spring.bsh"
);

__cas() {

  zorka.logInfo("Enabling CAS monitoring ...");


  zorka.defCfg("cas.audit", "yes");
  zorka.defCfg("cas.audit.file", zorka.boolCfg("cas.audit"));
  zorka.defCfg("cas.audit.file.path", util.path("${zorka.log.dir}", "cas_audit.log"));
  zorka.defCfg("cas.audit.syslog", "no");
  zorka.defCfg("cas.audit.syslog.addr", "127.0.0.1");
  zorka.defCfg("cas.audit.secure", "no");
  zorka.defCfg("cas.audit.zabbix", "no");
  zorka.defCfg("cas.audit.zabbix.host", zorka.stringCfg("zorka.hostname"));
  zorka.defCfg("cas.audit.zabbix.addr", zorka.stringCfg("zabbix.server.addr"));
  zorka.defCfg("cas.audit.tag", "cas.audit");

  zorka.defCfg("cas.stats", "yes");
  zorka.defCfg("cas.stats.mbean", "cas:name=CasAudit,type=ZorkaStats");
  zorka.defCfg("cas.trace", zorka.boolCfg("tracer"));
  zorka.defCfg("cas.trace.time", zorka.longCfg("tracer.min.trace.time"));


  _audit = zorka.boolCfg("cas.audit");
  _audit_file = _audit && zorka.boolCfg("cas.audit.file");
  _audit_syslog = _audit && zorka.boolCfg("cas.audit.syslog");
  _audit_zabbix = _audit && zorka.boolCfg("cas.audit.zabbix");
  _audit_tag = zorka.stringCfg("cas.audit.tag");

  _stats = zorka.boolCfg("cas.stats");
  _mbean = zorka.stringCfg("cas.stats.mbean");

  _trace = zorka.boolCfg("cas.trace");
  _trace_time = zorka.longCfg("cas.trace.time");


  if (_audit_file) {
    filePath = zorka.stringCfg("cas.audit.file.path", zorka.formatCfg("${zorka.log.dir}/cas_audit.log"));
    zorka.logInfo("CAS Audit logs will be logged to local file: " + filePath);
    fileTrapper = zorka.dailyFileTrapper("cas.audit", zorka.INFO, filePath, false);
  }


  if (_audit_syslog) {
    syslogAddr = zorka.stringCfg("cas.audit.syslog.addr");
    syslogTrapper = syslog.trapper("audit", syslogAddr, zorka.getHostname(), syslog.F_AUDIT);
    zorka.logInfo("CAS Audit logs will be sent to remote syslog server: " + syslogAddr);
  }


  if (_audit_zabbix) {
    zabbixTrapper = zabbix.trapper("cas.audit", "${cas.audit.zabbix.addr}", ${cas.audit.zabbix.host}, _audit_tag);
    zorka.logInfo("CAS Audit logs will be sent to zabbix server: ${cas.audit.zabbix.addr}/${cas.audit.zabbix.host}");
  }



  audit(sdef, action, expr) {

    sdef = sdef.onSubmit(spy.strTime("TIME"));

    if (_audit_file) {
      sdef = sdef.onSubmit(spy.trapperCollector(fileTrapper, zorka.INFO, _audit_tag, expr));
    }

    if (_audit_syslog) {
      sdef = sdef.onSubmit(spy.trapperCollector(syslogTrapper, zorka.INFO, _audit_tag, expr));
    }

    if (_audit_zabbix) {
      sdef = sdef.onSubmit(spy.trapperCollector(zabbixTrapper, zorka.INFO, _audit_tag, expr));
    }

    if(_stats) {
      sdef = sdef.onSubmit(spy.zorkaStats("java", _mbean, "stats", action));
    }

    spy.add(sdef);
  }


  request = new ThreadLocal();

  // Intercept request dispatcher and store request object for later use
  spy.add(spy.instance("CAS_HTTP_REQ")
    .onEnter(spy.fetchArg("REQ", 1), spy.tlSet("REQ", request))
    .onReturn(spy.tlRemove(request))
    .onError(spy.tlRemove(request))
    .include(spy.byMethod("org.jasig.cas.web.init.SafeDispatcherServlet", "service")));


  // Authentication attempts
  sdefAuth = spy.instrument("CAS_AUTH")
    .onEnter(spy.fetchArg("WHO", 1), spy.tlGet("REQ", request))
    .onReturn(spy.put("ACTION", "AUTHENTICATION_SUCCESS"))
    .onError(spy.put("ACTION", "AUTHENTICATION_FAILED"))
    .onSubmit(tracer.attr("ACTION", "ACTION"))
    .include(spy.byMethod("org.jasig.cas.authentication.AbstractAuthenticationManager", "authenticate"));


  audit(sdefAuth, "AUTHENTICATION", "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} time=${TIME}");


  // TGT-s created
  sdefTgtCreated = spy.instrument("CAS_TGT_CREATE")
    .onEnter(spy.fetchArg("WHO", 1), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "TICKET_GRANTING_TICKET_CREATED"), tracer.attr("WHAT", "WHAT"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "TICKET_GRANTING_TICKET_NOT_CREATED"))
    .onSubmit(tracer.attr("ACTION", "ACTION"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "createTicketGrantingTicket"));

  audit(sdefTgtCreated, "TGT_CREATE", "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} what=${WHAT} time=${TIME}");


  // TGT-s destroyed
  sdefTgtDestroyed = spy.instrument("CAS_TGT_DESTROY")
    .onEnter(spy.fetchArg("WHO", 1), spy.tlGet("REQ", request), tracer.begin("CAS"), tracer.attr("WHO", "WHO"))
    .onReturn(spy.put("WHAT", ""), spy.put("ACTION", "TICKET_GRANTING_TICKET_DESTROYED"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "TICKET_GRANTING_TICKET_NOT_DESTROYED"))
    .onSubmit(tracer.attr("ACTION", "ACTION"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "destroyTicketGrantingTicket"));

  audit(sdefTgtDestroyed, "TGT_DESTROY",
    "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} what=${WHAT} time=${TIME}");



  // Service tickets granted
  sdefSvcGranted = spy.instrument("CAS_SVC_GRANT")
    .onEnter(spy.fetchArg("TGT", 1), spy.fetchArg("SERVICE", 2), spy.fetchArg("WHO", 2), spy.tlGet("REQ", request), 
      tracer.begin("CAS"), tracer.attr("TGT", "TGT"), 
      spy.format("SERVICE", "${SERVICE}"), tracer.attr("SERVICE", "SERVICE"), 
      spy.format("WHO", "${WHO}"), tracer.attr("WHO", "WHO"))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "SERVICE_TICKET_GRANTED"), tracer.attr("WHAT", "WHAT"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "SERVICE_TICKET_NOT_GRANTED"))
    .onSubmit(tracer.attr("ACTION", "ACTION"))
    .include(spy.byMethod(1, "org.jasig.cas.CentralAuthenticationServiceImpl", "grantServiceTicket", "String",
        "String", "org.jasig.cas.authentication.principal.Service", "org.jasig.cas.authentication.principal.Credentials"));

  audit(sdefSvcGranted, "SVT_GRANT",
    "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} service=${SERVICE} tgt=${TGT} what=${WHAT} time=${TIME}");


  // Proxy granting ticket created
  sdefProxyGranted = spy.instrument("CAS_PROXY_GRANT")
    .onEnter(spy.fetchArg("TICKET", 1), spy.fetchArg("WHO", 2), spy.tlGet("REQ", request), 
      tracer.begin("CAS"), tracer.attr("TICKET", "TICKET"), tracer.attr("WHO", "WHO"))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "PROXY_GRANTING_TICKET_CREATED"), tracer.attr("WHAT", "WHAT"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "PROXY_GRANTING_TICKET_NOT_CREATED"))
    .onSubmit(spy.strTime("TIME"), spy.zorkaStats("java", _mbean, "stats", "PROXY_CREATE"), tracer.attr("ACTION", "ACTION"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "delegateTicketGrantingTicket"));

  audit(sdefProxyGranted, "PROXY_CREATE",
    "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} what=${WHAT} serviceTicket=${TICKET} time=${TIME}");



  process_ticket() {
    process(rec) {
      //zorka.logInfo("Processing ticket ...");
      registry = zorka.get(rec.get("THIS"), "serviceTicketRegistry");
      if (registry != null) {
        ticket = registry.getTicket(rec.get("TICKET"));
        if (ticket != null) {
          t = System.currentTimeMillis() - ticket.getCreationTime();
          rec.put("TICKET_AGE_MS", t);
          tracer.newAttr("TICKET_AGE_MS", t);
          if (t > 1000) {
            tracer.newFlags(tracer.SUBMIT_TRACE);
          }
          rec.put("TA", 1000000L * t);
        } else zorka.logInfo("Ticket " + rec.get("TICKET") + " not found.");
      } else zorka.logInfo("Service registry not found.");
      return rec;
    }
    return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }



  // Validate service ticket
  sdefSvcValidate = spy.instrument("CAS_SVC_VALIDATE")
    .onEnter(spy.fetchArg("THIS", 0), spy.fetchArg("TICKET", 1), spy.fetchArg("SERVICE", 2), spy.tlGet("REQ", request), 
      tracer.begin("CAS"), process_ticket(), tracer.attr("TICKET", "TICKET"), 
      spy.format("SERVICE", "${SERVICE}"), tracer.attr("SERVICE", "SERVICE"))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "SERVICE_TICKET_VALIDATE_SUCCESS"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "SERVICE_TICKET_VALIDATE_FAILURE"))
    .onSubmit(spy.strTime("TIME"), tracer.attr("ACTION", "ACTION"),
      spy.zorkaStats("java", _mbean, "stats", "TICKET_AGE", "TA"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "validateServiceTicket"));

  audit(sdefSvcValidate, "SVT_VALIDATE",
    "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} what=${WHAT} serviceTicket=${TICKET} service=${SERVICE} time=${TIME} ticketAge=${TICKET_AGE_MS}ms");


  // Delete a service
  sdefSvcDelete = spy.instrument("CAS_SVC_DELETE")
    .onEnter(spy.fetchArg("ID", 1), spy.tlGet("REQ", request))
    .onReturn(spy.put("RESULT", "OK"), spy.put("ACTION", "DELETE_SERVICE_SUCCESS"))
    .onError(spy.fetchError("RESULT"), spy.put("ACTION", "DELETE_SERVICE_FAILURE"))
    .onSubmit(spy.strTime("TIME"))
    .include(spy.byMethod("org.jasig.cas.DefaultServicesManagerImpl", "delete"));

  audit(sdefSvcDelete, "SERVICE_DELETE",
    "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} result=${RESULT} id=${ID}");


  // Save a service
  sdefSvcSave = spy.instrument("CAS_SVC_SAVE")
    .onEnter(spy.fetchArg("SERVICE", 1), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("RESULT"), spy.put("ACTION", "SAVE_SERVICE_SUCCESS"))
    .onError(spy.fetchError("RESULT"), spy.put("ACTION", "SAVE_SERVICE_FAILURE"))
    .onSubmit(spy.strTime("TIME"))
    .include(spy.byMethod("org.jasig.cas.DefaultServicesManagerImpl", "save"));

  audit(sdefSvcSave, "SERVICE_SAVE",
    "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} service=${SERVICE} result=${RESULT} time=${TIME}");


  discovery() {
    return zabbix.discovery(zorka.query("java", mbean, "name", "type").get("stats").listAs("**", "ACTION"));
  }

  if (zorka.boolCfg("tracer")) {
    tracer.exclude(
      "org.jasig.cas.aspect.LogAspect",
      "org.opensaml.xml.**"
    );
  }

  return this;
}

cas = __cas();


