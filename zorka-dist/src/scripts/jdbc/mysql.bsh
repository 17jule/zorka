
/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

__mysql() {

  spy.add(spy.instrument()
    .onEnter(spy.fetchArg("THIS", 0), spy.fetchArg("SQL", 1),
      spy.format("DB", "${THIS.connection.database}"),
      sql._trace ? tracer.attr("SQL", "SQL") : null,
      sql._trace ? tracer.attr("DB", "DB") : null,
      sql._trace ? tracer.begin("SQL", zorka.longCfg("sql.trace.time")) : null)
    .onError(spy.fetchError("ERR"),
      sql._errorF ? spy.trapperCollector(sql.error_ft, zorka.ERROR, "SQL", zorka.stringCfg("sql.error.format"), zorka.stringCfg("sql.error.format"), "ERR") : null)
    .onSubmit(spy.strTime("TIME"),
      sql._slow ? spy.subchain(
        spy.longerThan(zorka.longCfg("sql.slow.time")),
        sql._slowF ? spy.trapperCollector(sql.slow_ft, zorka.INFO, "SQL", zorka.stringCfg("sql.slow.format")) : null
      ) : null,
      sql._stats ? spy.zorkaStats("java", sql._mbean, "ALL", "ALL") : null,
      sql._stats ? spy.zorkaStats("java", sql._mbean, "ALL", "${DB}") : null)
    .include(spy.byMethod(spy.AC_PUBLIC, "com.mysql.jdbc.StatementImpl", "execut*", null, "String")));

  spy.add(spy.instrument()
    .onEnter(spy.fetchArg("THIS", 0),
      spy.format("SQL", "${THIS.originalSql}"),
      spy.format("DB", "${THIS.connection.database}"),
      sql._trace ? tracer.attr("SQL", "SQL") : null,
      sql._trace ? tracer.attr("DB", "DB") : null,
      sql._trace ? tracer.begin("SQL", zorka.longCfg("sql.trace.time")) : null)
    .onError(spy.fetchError("ERR"),
      sql._errorF ? spy.trapperCollector(sql.error_ft, zorka.ERROR, "SQL", zorka.stringCfg("sql.error.format"), zorka.stringCfg("sql.error.format"), "ERR") : null)
    .onSubmit(spy.strTime("TIME"),
      sql._slow ? spy.subchain(
        spy.longerThan(zorka.longCfg("sql.slow.time")),
        sql._slowF ? spy.trapperCollector(sql.slow_ft, zorka.INFO, "SQL", zorka.stringCfg("sql.slow.format")) : null
      ) : null,
      sql._stats ? spy.zorkaStats("java", sql._mbean, "ALL", "ALL") : null,
      sql._stats ? spy.zorkaStats("java", sql._mbean, "ALL", "${DB}") : null)
    .include(
      spy.byMethod("com.mysql.jdbc.PreparedStatement", "execut*"),
      spy.byMethod("com.mysql.jdbc.CallableStatement", "execut*")));

  return this;
}


mysql = __mysql();

