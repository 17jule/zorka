
; Some aliases to commonly used functions
(def first car)
(def second cadr)
(def third caddr)
(def rest cdr)

(def nil? null?)

(def defmacro
  (macro (name args . body)
    `(def ~name
      (macro ~args ~@body))))


(defmacro defn (name args . body)
  `(def ~name
    (fn ~args ~@body)))


(defmacro lazy-seq form
  `(_lazy-seq (fn () ~@form)))


(defmacro if (icond ithen . ielse)
  `(cond
    (~icond ~ithen)
    (else
      ~(cond
          ((null? ielse) 'nil)
          (else `~@(car ielse))))))


(defn any? (f coll)
  (cond
    ((null? coll) #f)
    ((f (car coll)) #t)
    (else (any? f (cdr coll)))))


(defn map (f . cs)
  (cond
    ((null? (cdr cs))
      (if (car cs)
        (lazy-seq
          (cons
            (f (caar cs))
            (map f (cdar cs))))))
    (else
      (cond
        ((any? nil? cs) nil)
        (lazy-seq
          (cons
            (apply f (map first cs))
            (apply map f (map rest cs))))))))


(defn reduce (f coll)
  (cond
    ((null? coll) nil)
    ((null? (cdr coll)) (first coll))
    (else
      (reduce f
        (cons
          (f (first coll) (second coll))
          (cddr coll))))))


(defmacro or args
  (if args `(cond ~@(map list args)) #f))


(defmacro and args
  (cond
    ((null? args) #t)
    ((null? (rest args)) `(cond (~(first args)) #f))
    (else `(if ~(first args) (and ~@(rest args)) #f))))


(defmacro let (bindings . body)
  `((fn ~(map first bindings) ~@body)
    ~@(map second bindings)))


(defmacro let* (bindings . body)
  (if (null? bindings)
    `((fn () ~@body))
    `(let (~(first bindings))
      (let* ~(rest bindings) ~@body))))


(defmacro letrec (bindings . body)
  (let ((ks (map first bindings)) (vs (map second bindings)))
    `(let ~(map (fn (k) `(~k nil)) ks)
      ~@(map (fn (k v) `(set! ~k ~v)) ks vs)
      ~@body)))


(defmacro letcc (var . body)
  `(call-with-current-continuation
    (fn (~var) ~@body)))


(defn identity (x)
  x)


(defmacro get-> (obj . args)
  (cond
    ((null? args) obj)
    ((null? (cdr args))
      `(get ~obj ~(first args)))
    (else
      `(get-> (get ~obj ~(first args)) ~@(rest args)))))


(defmacro -> (obj . (op0 . opn))
  (cond
    ((nil? op0) obj)
    ((list? op0) `(-> (~(first op0) ~obj ~@(rest op0)) ~@opn))
    (:else `(-> (~op0 ~obj) ~@opn))))

